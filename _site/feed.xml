<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Matt Giguere</title>
    <description>Hi, I&#39;m Matt Giguere, a graduate student searching for rocky planets and characterizing stellar activity of the stars that host them. In addition to working towards the discovery  of other rocky worlds, I am constantly working to defend my best dad  of the year title. I also enjoy learning new programming languages,  new statistical methods, and new visualization tools, and making  things in many different media.
</description>
    <link>http://mattgiguere.github.io/</link>
    <atom:link href="http://mattgiguere.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 16 Dec 2015 09:42:24 -0500</pubDate>
    <lastBuildDate>Wed, 16 Dec 2015 09:42:24 -0500</lastBuildDate>
    <generator>Jekyll v3.0.1</generator>
    
      <item>
        <title>Issues with Mac OS X El Capitan</title>
        <description>&lt;p&gt;After upgrading from Yosemite to El Capitan, I’ve had a few issues. Below is a
list of these issues, with links to blog posts on how I fixed them:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;/2015/12/15/Using_TeX_in_Mac_OS_X_El_Capitan.html&quot;&gt;LaTeX&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/2015/12/16/Installing_Jekyll_on_Mac_OS_X_El_Capitan.html&quot;&gt;jekyll&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Wed, 16 Dec 2015 02:43:40 -0500</pubDate>
        <link>http://mattgiguere.github.io/2015/12/16/Issues_with_Mac_OS-X_El_Capitan.html</link>
        <guid isPermaLink="true">http://mattgiguere.github.io/2015/12/16/Issues_with_Mac_OS-X_El_Capitan.html</guid>
        
        <category>mac</category>
        
        <category>os</category>
        
        <category>x,</category>
        
        <category>el</category>
        
        <category>capitan</category>
        
        
      </item>
    
      <item>
        <title>Installing Jekyll on Mac OS X El Capitan</title>
        <description>&lt;p&gt;After upgrading from Yosemite to El Capitan, one of &lt;a href=&quot;/2015/12/16/Issues_with_Mac_OS-X_El_Capitan.html&quot;&gt;several issues&lt;/a&gt;
I had was that Jekyll no longer worked. Similar to the issue I had with
LaTex, this seems to be related to the new feature in El Capitan known as
&lt;a href=&quot;https://developer.apple.com/library/mac/documentation/Security/Conceptual/System_Integrity_Protection_Guide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40016462-CH1-DontLinkElementID_15&quot;&gt;System Integrity Protection&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The error message I received stated:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gem install jekyll
ERROR:  While executing gem ... (Gem::FilePermissionError)
    You don&#39;t have write permissions for the /Library/Ruby/Gems/2.0.0 directory.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This can be overcome by installing a new version of ruby using homebrew, and
then installing jekyll. @chmaynard was kind enough to put togher a nice
description of the &lt;a href=&quot;https://github.com/jekyll/jekyll/issues/3984&quot;&gt;steps necessary&lt;/a&gt;, which are described below
for convenience:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Install the Xcode command line utilities xcode-select –install&lt;/li&gt;
  &lt;li&gt;Install Homebrew: &lt;code class=&quot;highlighter-rouge&quot;&gt;ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;&lt;/code&gt;`&lt;/li&gt;
  &lt;li&gt;Install the latest ruby via homebrew: &lt;code class=&quot;highlighter-rouge&quot;&gt;brew install ruby&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Install the latest Jekyll: &lt;code class=&quot;highlighter-rouge&quot;&gt;gem install jekyll&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After that, jekyll worked for me without further problems.&lt;/p&gt;

</description>
        <pubDate>Wed, 16 Dec 2015 02:43:40 -0500</pubDate>
        <link>http://mattgiguere.github.io/2015/12/16/Installing_Jekyll_on_Mac_OS_X_El_Capitan.html</link>
        <guid isPermaLink="true">http://mattgiguere.github.io/2015/12/16/Installing_Jekyll_on_Mac_OS_X_El_Capitan.html</guid>
        
        <category>mac</category>
        
        <category>os</category>
        
        <category>x,</category>
        
        <category>el</category>
        
        <category>capitan,</category>
        
        <category>jekyll</category>
        
        
      </item>
    
      <item>
        <title>Using TeX in Mac OS X El Capitan</title>
        <description>&lt;p&gt;If you’ve recently upgraded to OS X El Capitan, and you’re getting an error
message when trying to compile TeX, the reason is most likely due to one of
the new features in OS X El Capitan called &lt;a href=&quot;https://developer.apple.com/library/mac/documentation/Security/Conceptual/System_Integrity_Protection_Guide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40016462-CH1-DontLinkElementID_15&quot;&gt;System Integrity Protection&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;When I upgraded to Mac OS X El Capitan, all non-native items once installed in
&lt;code class=&quot;highlighter-rouge&quot;&gt;/usr&lt;/code&gt;, including my simlink to my texbin
directory, were wiped out. This caused an error message when I tried to compile
a latex document:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Can’t find required tool.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;/usr/texbin/simpdftex does not exist. TeXShop is  a front end for TeX, but you also need a TeX distribution. Perhaps such a distribution was not installed or was removed during a system upgrade. If so, go to http://tug.org/MacTeX and follow the instructions to (re)install MacTeX. A less likely possibility is that a tool path is incorrectly configured in TeXShop preferences. This can happen if you are using the macports or fink distributions.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;My TeX editor of choice is TeXShop, but I imagine this error occurs with other
TeX editors in OS X. The following solution should work independent of the
TeX editor.&lt;/p&gt;

&lt;p&gt;When I tried to recreate the symbolic link, I received the following error message:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo ln -s /usr/local/texlive/2014/bin/x86_64-darwin texbin
ln: texbin: Operation not permitted
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Looking into the &lt;a href=&quot;https://developer.apple.com/library/mac/documentation/Security/Conceptual/System_Integrity_Protection_Guide/ConfiguringSystemIntegrityProtection/ConfiguringSystemIntegrityProtection.html&quot;&gt;documentation&lt;/a&gt;, to recreate a symbolic link in the
&lt;code class=&quot;highlighter-rouge&quot;&gt;/usr&lt;/code&gt; directory, SIP needs to be disabled. To do so, carry out the following
steps:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Reboot in “Recovery Mode” by restarting and holding down &lt;code class=&quot;highlighter-rouge&quot;&gt;Command&lt;/code&gt;+&lt;code class=&quot;highlighter-rouge&quot;&gt;R&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Click Utilities -&amp;gt; Terminal&lt;/li&gt;
  &lt;li&gt;type &lt;code class=&quot;highlighter-rouge&quot;&gt;csrutil disable&lt;/code&gt; and press &lt;code class=&quot;highlighter-rouge&quot;&gt;Enter&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Restart&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Once your computer has restarted,  you can check if the operation was
successful by typing &lt;code class=&quot;highlighter-rouge&quot;&gt;csrutil status&lt;/code&gt; at the command line. If all went
well, you should see the following:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$csrutil status
System Integrity Protection status: disabled
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Next, recreate the symbolic link to the texbin directory:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
sudo ln -s /usr/local/texlive/2014/bin/x86_64-darwin texbin
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Once I did this, I could recompile TeX documents using TeXShop just fine!&lt;/p&gt;

</description>
        <pubDate>Tue, 15 Dec 2015 10:47:31 -0500</pubDate>
        <link>http://mattgiguere.github.io/2015/12/15/Using_TeX_in_Mac_OS_X_El_Capitan.html</link>
        <guid isPermaLink="true">http://mattgiguere.github.io/2015/12/15/Using_TeX_in_Mac_OS_X_El_Capitan.html</guid>
        
        <category>mac</category>
        
        <category>os</category>
        
        <category>x,</category>
        
        <category>latex,</category>
        
        <category>el</category>
        
        <category>capitan</category>
        
        
      </item>
    
      <item>
        <title>Mac App Store Hanging While &quot;Checking for updates...&quot;</title>
        <description>&lt;p&gt;For the past day the Mac App Store has hung on the “Updates” tab with a
“Checking for updates…” message in the top right corner. The version
of the OS was Mac OS X 10.10.3, and I’m using a MacBook Pro (Retina, Mid 2012)
laptop.&lt;/p&gt;

&lt;p&gt;I tried (in this order):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;restarting the App Store App&lt;/li&gt;
  &lt;li&gt;restarting the computer&lt;/li&gt;
  &lt;li&gt;repairing disk permissions from the normal partition&lt;/li&gt;
  &lt;li&gt;restarting while holding option to boot from the recovery partition, and then
again “Repair Disk Permissions” and “Repair Disk”&lt;/li&gt;
  &lt;li&gt;reseting the &lt;a href=&quot;https://support.apple.com/kb/PH11243?locale=en_US&amp;amp;viewlocale=en_US&quot;&gt;PRAM&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;reseting the &lt;a href=&quot;https://support.apple.com/en-us/HT201295&quot;&gt;SMC&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;None of these tricks worked. Then, I found
&lt;a href=&quot;https://discussions.apple.com/message/28416971#28416971&quot;&gt;this gem&lt;/a&gt; of a solution!&lt;/p&gt;

&lt;p&gt;In brief, to fix a hanging Mac App Store, run the software update from the
command line using this command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo softwareupdate -i -a
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Issuing the above command installed the Mac OS X Command Line Tools update and
the Mac OS X 10.10.4 update for me. After restarting my computer, I could
then install the remaining third party updates.&lt;/p&gt;
</description>
        <pubDate>Tue, 30 Jun 2015 14:18:28 -0400</pubDate>
        <link>http://mattgiguere.github.io/2015/06/30/mac_app_store_hangs_checking_for_updates.html</link>
        <guid isPermaLink="true">http://mattgiguere.github.io/2015/06/30/mac_app_store_hangs_checking_for_updates.html</guid>
        
        <category>mac</category>
        
        <category>os</category>
        
        <category>x</category>
        
        
      </item>
    
      <item>
        <title>Git History in Python with Dulwich</title>
        <description>&lt;p&gt;Lately I have been running quite a few jobs on a few different cluster:
the Yale Omega HPC cluster, an on demand AWS EC2 cluster using the
starcluster package, and the our exoplanets research group cluster.
There have been so many different runs that it is becoming difficult
to keep track of which code base corresponds to which results.
This problem has been amplified by the up to two day delay between
submitting a job on Omega, and when it actually runs.&lt;/p&gt;

&lt;p&gt;To assist with the association of version history with job output I
thought it would be nice to write the latest github commit id for a
file to the output data directory. Fortunately, I am not the only
one with this desire, and many people have worked on the
&lt;a href=&quot;https://github.com/jelmer/dulwich&quot;&gt;dulwich&lt;/a&gt; project, which is a robust library for handling
git data within Python.&lt;/p&gt;

&lt;h4 id=&quot;retrieving-commit-data-with-dulwich&quot;&gt;Retrieving commit data with Dulwich&lt;/h4&gt;

&lt;p&gt;I did not find dulwich exactly intuitive, but fortunately there is
a decent example in their github repo, and it only took a little
bit of hacking to get it to get my git data. Below is the code I
used to&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;dulwich.repo&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Repo&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;time&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# create a repo object:&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;rep&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Repo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;/home/matt/projects/MOST/&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# specify the file to get the last commit of:&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dirfnm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;code/eeTwoSptDtrnddOff.py&#39;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# now create a repo &quot;walker&quot; that gets the&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# last commit for the dirfnm file:&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;repowlkr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_walker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;paths&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dirfnm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max_entries&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lastfcommit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;repowlkr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;commit&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;StopIteration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;{} does not exist in repo history.&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dirfnm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;using {} git version: {}&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dirfnm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lastfcommit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The above code prints to screen the most recent commit id for the
executed file. I also want to print the most recent commit id for
the executed file &lt;em&gt;and&lt;/em&gt; the whole repository to an output directory
where all the output data go:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c&quot;&gt;# add git version information for future reference:&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;odir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;/git_info.txt&#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;w&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;##############################&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;file executed: {}.py&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;execfilenm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;latest commit to {}.py: {}&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;execfilenm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lastfcommit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;author: {}&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lastfcommit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;time: {}&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lastfcommit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;author_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;repowlkr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_walker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_entries&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lastrcommit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;repowlkr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;commit&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;StopIteration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;Cannot get repo history.&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;##############################&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;latest commit to MOST repo: {}&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lastrcommit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;author: {}&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lastrcommit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;time: {}&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lastrcommit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;author_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;the-result&quot;&gt;The Result&lt;/h4&gt;
&lt;p&gt;The code prints the following line at run time&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;using eeTwoSptDtrnddOff git version: 4bb26eb1bacb47c435a015195c824c0acfaa5661&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and makes the file &lt;code class=&quot;highlighter-rouge&quot;&gt;git_info.txt&lt;/code&gt;, which contains the following:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;##############################
file executed: eeTwoSptDtrnddOff.py
latest commit to eeTwoSptDtrnddOff.py: 4bb26eb1bacb47c435a015195c824c0acfaa5661
author: Matt Giguere &amp;lt;matthew.giguere@gmail.com&amp;gt;
time: Wed Apr 29 14:38:39 2015
##############################
latest commit to MOST repo: f0be22d21db4017a6f067ebb0ddce3fd87104af9
author: Matt Giguere &amp;lt;matthew.giguere@gmail.com&amp;gt;
time: Wed Apr 29 14:40:02 2015&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</description>
        <pubDate>Wed, 29 Apr 2015 10:57:19 -0400</pubDate>
        <link>http://mattgiguere.github.io/2015/04/29/documenting-git-repo-version-with-dulwich.html</link>
        <guid isPermaLink="true">http://mattgiguere.github.io/2015/04/29/documenting-git-repo-version-with-dulwich.html</guid>
        
        <category>python,</category>
        
        <category>mpi4py,</category>
        
        <category>mcmc,</category>
        
        <category>aws,</category>
        
        <category>amazon,</category>
        
        <category>ec2,</category>
        
        <category>starcluster,</category>
        
        <category>dulwich</category>
        
        
      </item>
    
      <item>
        <title>Setting up Python and MPI on EC2</title>
        <description>&lt;p&gt;In a &lt;a href=&quot;/2015/03/11/creating-an-aws-ec2-cluster.html&quot;&gt;previous post&lt;/a&gt;, I described how to setup a cluster using the Amazon EC2 service and the starcluster package. In this post I will describe getting Python code up and running on a &lt;a href=&quot;http://star.mit.edu/cluster&quot;&gt;Starcluster&lt;/a&gt; cluster instance on Amazon EC2 with MPI.&lt;/p&gt;

&lt;h4 id=&quot;starting-up-the-cluster&quot;&gt;Starting up the cluster&lt;/h4&gt;

&lt;p&gt;First, we need to start our cluster instance. This can easily be done using starcluster by typing the following command:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;starcluster start mycluster&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;To SSH into the master node of the cluster:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;starcluster sshmaster mycluster&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The SSH port on my machine is different from the default port, and it caused some problems with starcluster.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;starcluster sshmaster mycluster
StarCluster - &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;http://star.mit.edu/cluster&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;v. 0.95.6&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Software Tools &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;Academics and Researchers &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;STAR&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Please submit bug reports to starcluster@mit.edu

ssh: connect to host ec2-25-3-89-123.compute-1.amazonaws.com port 2234: Operation timed out&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;One solution to this is to add an entry in &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.ssh/config&lt;/code&gt; to specify the port to the master node:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;Host ec2-25-3-89-123.compute-1.amazonaws.com
   Hostname ec2-25-3-89-123.compute-1.amazonaws.com
   Port 22&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;But this means adding a new entry every time a new cluster is started! That’s not an acceptable solution.&lt;/p&gt;

&lt;p&gt;I ended up changing the SSH port in &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/services&lt;/code&gt; &lt;em&gt;back&lt;/em&gt; to 22, and then modifying the &lt;code class=&quot;highlighter-rouge&quot;&gt;/System/Library/LaunchDaemons/ssh.plist&lt;/code&gt; file to a port other than 22.&lt;/p&gt;

&lt;p&gt;Here’s what that looks like in OS X Yosemite:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&amp;lt;?xml &lt;span class=&quot;nv&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1.0&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;encoding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;?&amp;gt;
&amp;lt;!DOCTYPE plist PUBLIC &lt;span class=&quot;s2&quot;&gt;&quot;-//Apple//DTD PLIST 1.0//EN&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&lt;/span&gt;&amp;gt;
&amp;lt;plist &lt;span class=&quot;nv&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1.0&quot;&lt;/span&gt;&amp;gt;
&amp;lt;dict&amp;gt;
	&amp;lt;key&amp;gt;Disabled&amp;lt;/key&amp;gt;
	&amp;lt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;/&amp;gt;
	&amp;lt;key&amp;gt;Label&amp;lt;/key&amp;gt;
	&amp;lt;string&amp;gt;com.openssh.sshd&amp;lt;/string&amp;gt;
	&amp;lt;key&amp;gt;Program&amp;lt;/key&amp;gt;
	&amp;lt;string&amp;gt;/usr/libexec/sshd-keygen-wrapper&amp;lt;/string&amp;gt;
	&amp;lt;key&amp;gt;ProgramArguments&amp;lt;/key&amp;gt;
	&amp;lt;array&amp;gt;
		&amp;lt;string&amp;gt;/usr/sbin/sshd&amp;lt;/string&amp;gt;
		&amp;lt;string&amp;gt;-i&amp;lt;/string&amp;gt;
	&amp;lt;/array&amp;gt;
	&amp;lt;key&amp;gt;Sockets&amp;lt;/key&amp;gt;
	&amp;lt;dict&amp;gt;
		&amp;lt;key&amp;gt;Listeners&amp;lt;/key&amp;gt;
		&amp;lt;dict&amp;gt;
			&amp;lt;key&amp;gt;SockServiceName&amp;lt;/key&amp;gt;
			&amp;lt;string&amp;gt;2123&amp;lt;/string&amp;gt;
			&amp;lt;key&amp;gt;Bonjour&amp;lt;/key&amp;gt;
			&amp;lt;array&amp;gt;
				&amp;lt;string&amp;gt;ssh&amp;lt;/string&amp;gt;
				&amp;lt;string&amp;gt;2123&amp;lt;/string&amp;gt;
			&amp;lt;/array&amp;gt;
		&amp;lt;/dict&amp;gt;
	&amp;lt;/dict&amp;gt;
	&amp;lt;key&amp;gt;inetdCompatibility&amp;lt;/key&amp;gt;
	&amp;lt;dict&amp;gt;
		&amp;lt;key&amp;gt;Wait&amp;lt;/key&amp;gt;
		&amp;lt;&lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;/&amp;gt;
	&amp;lt;/dict&amp;gt;
	&amp;lt;key&amp;gt;StandardErrorPath&amp;lt;/key&amp;gt;
	&amp;lt;string&amp;gt;/dev/null&amp;lt;/string&amp;gt;
	&amp;lt;key&amp;gt;SHAuthorizationRight&amp;lt;/key&amp;gt;
	&amp;lt;string&amp;gt;system.preferences&amp;lt;/string&amp;gt;
	&amp;lt;key&amp;gt;POSIXSpawnType&amp;lt;/key&amp;gt;
	&amp;lt;string&amp;gt;Interactive&amp;lt;/string&amp;gt;
&amp;lt;/dict&amp;gt;
&amp;lt;/plist&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Changing the port number to 2123 in the ssh.plist makes it so that my computer only allows incoming connections to port 2123, but the default port when trying to connect to other machines is still 22. Perfect!&lt;/p&gt;

&lt;h4 id=&quot;setting-up-python&quot;&gt;Setting up python&lt;/h4&gt;

&lt;p&gt;Next, we want to get the proper version of python installed on our cluster. The instances that come with starcluster by default have a ton of useful tools already built in. Immediately after SSHing into the master node, the available tools are listed:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;starcluster sshmaster mycluster
StarCluster - &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;http://star.mit.edu/cluster&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;v. 0.95.6&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Software Tools &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;Academics and Researchers &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;STAR&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Please submit bug reports to starcluster@mit.edu

The authenticity of host &lt;span class=&quot;s1&quot;&gt;&#39;ec2-25-3-89-123.compute-1.amazonaws.com (25.3.89.123)&#39;&lt;/span&gt; can&lt;span class=&quot;s1&quot;&gt;&#39;t be established.
RSA key fingerprint is ab:ef:d8:2f:3c:78:b3:a2:a2:2c:4d:8e:3f:7e:2a:8c.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added &#39;&lt;/span&gt;ec2-25-3-89-123.compute-1.amazonaws.com,25.3.89.123&lt;span class=&quot;s1&quot;&gt;&#39; (RSA) to the list of known hosts.
          _                 _           _
__/\_____| |_ __ _ _ __ ___| |_   _ ___| |_ ___ _ __
\    / __| __/ _` | &#39;&lt;/span&gt;__/ __| | | | / __| __/ _ &lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;__|
/_  _\__ \ || (_| | | | (__| | |_| \__ \ ||  __/ |
  \/ |___/\__\__,_|_|  \___|_|\__,_|___/\__\___|_|

StarCluster Ubuntu 13.04 AMI
Software Tools for Academics and Researchers (STAR)
Homepage: http://star.mit.edu/cluster
Documentation: http://star.mit.edu/cluster/docs/latest
Code: https://github.com/jtriley/StarCluster
Mailing list: http://star.mit.edu/cluster/mailinglist.html

This AMI Contains:

  * NVIDIA Driver 331.38
  * NVIDIA CUDA Toolkit 5.5.22
  * PyCuda 2013.1.1 and PyOpenCL 2013.2
  * MAGMA 1.4.1
  * Intel Ethernet Driver 2.11.3 (ixgbevf)
  * Open Grid Scheduler (OGS - formerly SGE) queuing system
  * Condor workload management system
  * OpenMPI compiled with Open Grid Scheduler support
  * OpenBLAS - Highly optimized Basic Linear Algebra Routines
  * NumPy/SciPy linked against OpenBlas
  * Pandas - Data Analysis Library
  * IPython 1.1.0 with parallel and notebook support
  * Julia 0.3pre
  * and more! (use &#39;&lt;/span&gt;dpkg -l&lt;span class=&quot;s1&quot;&gt;&#39; to show all installed packages)

Open Grid Scheduler/Condor cheat sheet:

  * qstat/condor_q - show status of batch jobs
  * qhost/condor_status- show status of hosts, queues, and jobs
  * qsub/condor_submit - submit batch jobs (e.g. qsub -cwd ./job.sh)
  * qdel/condor_rm - delete batch jobs (e.g. qdel 7)
  * qconf - configure Open Grid Scheduler system

Current System Stats:

  System load:  0.0               Processes:           94
  Usage of /:   63.3% of 7.74GB   Users logged in:     0
  Memory usage: 11%               IP address for eth0: 123.45.6.78
  Swap usage:   0%

    https://landscape.canonical.com/
root@master:~#&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is really great, but a lot of the versions listed here are dated, and the APIs have changed considerably. One option is to upgrade some of these libraries with pip:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;pip install pandas --upgrade
pip install numexpr --upgrade&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;One down side of simply upgrading the dependencies is that it takes a while — it took me 10 minutes and 7 seconds to start up a cluster and upgrade numpy and pandas. If you do not want to wait ten minutes every time you start up a cluster, another option is to use &lt;a href=&quot;http://conda.pydata.org/miniconda.html&quot;&gt;miniconda&lt;/a&gt;, a lightweight package that only contains conda and python, and then install only the necessary dependencies. I used miniconda when setting up travis-ci, which was covered briefly in &lt;a href=&quot;/2015/03/20/better-python-coding-practices.html&quot;&gt;this post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;When I switched from the version of python that comes built in with starcluster to miniconda, the total time to start up a cluster dropped from 10m7s to 4m57s. Switching to miniconda is not difficult; just type the following three lines once your cluster is started up and you have SSHed into the master node:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /home/sgeadmin; wget http://repo.continuum.io/miniconda/Miniconda-3.9.1-Linux-x86_64.sh -O miniconda.sh; bash miniconda.sh -b -p /home/sgeadmin/miniconda
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;export PATH=/home/sgeadmin/miniconda/bin:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\$&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;PATH&quot;&lt;/span&gt; &amp;gt;&amp;gt; .bashrc; &lt;span class=&quot;nb&quot;&gt;hash&lt;/span&gt; -r
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/home/sgeadmin/miniconda/bin:&lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt;; conda config --set always_yes yes --set changeps1 no&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And then installing numpy and pandas is much faster than upgrading the starcluster version:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;conda install numpy
conda install pandas&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I create a starcluster startup script that sets up my environment, uploads all my coda and input data to the cluster, updates and installs all python dependencies, and then submits the MPI job. See the end of this post for the script.&lt;/p&gt;

&lt;h3 id=&quot;running-mpi-on-the-starcluster&quot;&gt;Running MPI on the starcluster&lt;/h3&gt;

&lt;p&gt;Looking at the starcluster &lt;a href=&quot;http://star.mit.edu/cluster/docs/latest/manual/getting_started.html#compile-and-run-a-hello-world-openmpi-program&quot;&gt;Compile and run a “Hello World” OpenMPI program example&lt;/a&gt;, it looks like we need to run things as sgeadmin in order to use MPI. Indeed, when I tried running things as root, I got error message saying it couldn’t access things in the root directory:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;qrsh_starter: cannot change to directory /root/projects&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The /root directory only exists on the master node. We need to run our code from somewhere in the /home directory, since that’s the directory that is NFS mounted to all the nodes. This may also mean that upgrading pandas and numexpr only worked for the master node.&lt;/p&gt;

&lt;h3 id=&quot;putting-it-all-together&quot;&gt;Putting it all together&lt;/h3&gt;

&lt;p&gt;I made a script that will start up the cluster, and copy over all of the code and input data I want to use, then start an MPI job. Here’s what that script looks like:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/env bash&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Starting cluster...&quot;&lt;/span&gt;
starcluster start mycluster

&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Now upgrading pandas and numexpr...&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#upgrade numpy and pandas:&lt;/span&gt;
starcluster sshmaster mycluster &lt;span class=&quot;s1&quot;&gt;&#39;pip install pandas --upgrade&#39;&lt;/span&gt;
starcluster sshmaster mycluster &lt;span class=&quot;s1&quot;&gt;&#39;pip install numexpr --upgrade&#39;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#install dependencies:&lt;/span&gt;
starcluster sshmaster mycluster &lt;span class=&quot;s1&quot;&gt;&#39;pip install emcee&#39;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#append my projects directory to the Python path:&lt;/span&gt;
starcluster sshmaster mycluster &lt;span class=&quot;s1&quot;&gt;&#39;echo &quot; &quot; &amp;gt;&amp;gt; .bashrc&#39;&lt;/span&gt;
starcluster sshmaster mycluster &lt;span class=&quot;s1&quot;&gt;&#39;echo &quot;#Add my projects dir to python path:&quot; &amp;gt;&amp;gt; .bashrc&#39;&lt;/span&gt;
starcluster sshmaster mycluster &lt;span class=&quot;s1&quot;&gt;&#39;echo &quot;export PYTHONPATH=/root/projects:\$PYTHONPATH&quot; &amp;gt;&amp;gt; .bashrc&#39;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#add directories and copy over code:&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Creating projects directory...&quot;&lt;/span&gt;
starcluster sshmaster mycluster mkdir projects
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Creating MOST directory...&quot;&lt;/span&gt;
starcluster sshmaster mycluster mkdir projects/MOST
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Copying over module files...&quot;&lt;/span&gt;
starcluster put mycluster /home/matt/projects/MOST/__init__.py projects/MOST/
starcluster put mycluster /home/matt/projects/MOST/setup.py projects/MOST/
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Creating code directory...&quot;&lt;/span&gt;
starcluster sshmaster mycluster mkdir projects/MOST/code
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Copying over the code...&quot;&lt;/span&gt;
starcluster put mycluster /home/matt/projects/MOST/code projects/MOST/


&lt;span class=&quot;c&quot;&gt;#now add the data directories and input data:&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Creating data directories...&quot;&lt;/span&gt;
starcluster sshmaster mycluster mkdir projects/MOST/data
starcluster sshmaster mycluster mkdir projects/MOST/data/chiron
starcluster sshmaster mycluster mkdir projects/MOST/data/most
starcluster sshmaster mycluster mkdir projects/MOST/data/MCMC
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Copying over CHIRON data...&quot;&lt;/span&gt;
starcluster put mycluster /home/matt/projects/MOST/data/chiron/epsEriChironSepDec2014.txt projects/MOST/data/chiron/
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Copying over MOST data...&quot;&lt;/span&gt;
starcluster put mycluster /home/matt/projects/MOST/data/most/epsEriMostFullRedResamp.txt projects/MOST/data/most/

&lt;span class=&quot;c&quot;&gt;#now run the job&lt;/span&gt;
starcluster sshmaster mycluster &lt;span class=&quot;s1&quot;&gt;&#39;cd projects/MOST/code; qsub -cwd -pe orte 4 ./evol_starcluster_qsub_test.sh&#39;&lt;/span&gt;

starcluster sshmaster mycluster &lt;span class=&quot;s1&quot;&gt;&#39;qstat&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In the line that I use to run the job, I change directories into the directory with my code, and then call on qsub to execute my routine. The -cwd option tells qsub to start the code from the current working directory, and the -pe orte 4 tells it to use the orte parallel environment with 4 cores. The contents of &lt;code class=&quot;highlighter-rouge&quot;&gt;evol_starcluster_qsub_test.sh&lt;/code&gt; are just the program to be executed with MPI.&lt;/p&gt;

&lt;p&gt;Contents of evol_starcluster_qsub_test.sh:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;

mpiexec python eeTwoSptParTmpDfRtEvol.py 3 90 100 --thin 2&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;When running this script, user interaction is still required at one point. When SSHing into the master node for the first time, SSH will ask to confirm the identity of the machine:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;The authenticity of host &lt;span class=&quot;s1&quot;&gt;&#39;ec2-22-3-444-55.compute-1.amazonaws.com (22.3.44.55)&#39;&lt;/span&gt; can&lt;span class=&quot;s1&quot;&gt;&#39;t be established.
RSA key fingerprint is 12:34:56:78:90:aa:bb:cc:dd:ee:ff:11::22:33:44.
Are you sure you want to continue connecting (yes/no)? yes&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If you want to skip that, you can add the following to your &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.ssh/config&lt;/code&gt; file:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;StrictHostKeyChecking no&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</description>
        <pubDate>Thu, 26 Mar 2015 08:03:55 -0400</pubDate>
        <link>http://mattgiguere.github.io/2015/03/26/setting-up-python-on-ec2.html</link>
        <guid isPermaLink="true">http://mattgiguere.github.io/2015/03/26/setting-up-python-on-ec2.html</guid>
        
        <category>python,</category>
        
        <category>mpi4py,</category>
        
        <category>mcmc,</category>
        
        <category>aws,</category>
        
        <category>amazon,</category>
        
        <category>ec2,</category>
        
        <category>starcluster</category>
        
        
      </item>
    
      <item>
        <title>Better Python Coding Practices</title>
        <description>&lt;p&gt;Recently I’ve been interested in improving my coding practices, as
everyone should be. There are a few new tools that I have been
implementing that have already paid off in improving my end product.
In this blog post, I will describe some of these tools and show how
I got them up and running.&lt;/p&gt;

&lt;h3 id=&quot;unit-testing&quot;&gt;Unit Testing&lt;/h3&gt;
&lt;p&gt;The first thing that &lt;strong&gt;everyone&lt;/strong&gt; should do is &lt;a href=&quot;http://en.wikipedia.org/wiki/Unit_testing&quot;&gt;unit testing&lt;/a&gt;.
Unit testing ensures that bits of the code behave the way they are
expected to behave. This is done by writing simple test routines
that analyze the output of the code of interest.&lt;/p&gt;

&lt;p&gt;Below is a simple example.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Routine to test:&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;multiply_numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Test routine:&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_multiply_numbers_with_scalars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;multiply_numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This test ensures that the result the &lt;code class=&quot;highlighter-rouge&quot;&gt;multiply_numbers&lt;/code&gt; function
is the length that we would expect it to be. For simple one-liners
 like &lt;code class=&quot;highlighter-rouge&quot;&gt;multiply_numbers&lt;/code&gt;, there’s no need to test, but functions
 and methods in the real world are almost always more complicated,
 and as the complexity increases testing can save a ton of time
 that would otherwise be spent debugging.&lt;/p&gt;

&lt;p&gt;There are many libraries out there for testing python code, but
&lt;a href=&quot;https://nose.readthedocs.org/en/latest/&quot;&gt;nose&lt;/a&gt; looked the most appealing to me. How to set nose up
is detailed in their documentation. Personally, I used &lt;code class=&quot;highlighter-rouge&quot;&gt;pip&lt;/code&gt; to
install it:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;pip install nose&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I then created a “tests” directory in my repository root directory
and started filling it with short test routines to test out every
function and possibility of my code. Then to test your code with
nose, simply type &lt;code class=&quot;highlighter-rouge&quot;&gt;nosetests&lt;/code&gt; at the command line at the repository
root level. nose searches through your repository looking for test
code and executes the tests it finds. Here’s an example of nose
successfully executing all 12 of test routines it found in my
repository path:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;gp&quot;&gt;my_project$ &lt;/span&gt;nosetests
............
----------------------------------------------------------------------
Ran 12 tests &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;0.014s

OK
my_project&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If you’re curious what other testing packages exist out there for
python, I found the
&lt;a href=&quot;http://docs.python-guide.org/en/latest/writing/tests/&quot;&gt;Hitchhiker’s Guide to Python&lt;/a&gt; to give an excellent
introduction to unit testing in python.&lt;/p&gt;

&lt;h3 id=&quot;travis-ci&quot;&gt;Travis-CI&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://travis-ci.org&quot;&gt;Travis-CI&lt;/a&gt; is a continuous integration service. This allows for
automated testing of code upon pushes to a &lt;a href=&quot;https://github.com&quot;&gt;github&lt;/a&gt; repository.
This free tool for open source projects is great if you forget to run
&lt;code class=&quot;highlighter-rouge&quot;&gt;nosetests&lt;/code&gt; after adding new functionality to your code and also if
your collaborating with others. It will probably take a little time
to get travis setup for your particular needs. The Travis-CI
&lt;a href=&quot;http://docs.travis-ci.com/user/languages/python/&quot;&gt;docs&lt;/a&gt; are a good place to start, but I found their built
in python versions did not satisfy all of the dependencies for just
about any of my projects. Instead of building python and the
dependencies from scratch (e.g. numpy, scipy, pandas, etc),
continuum.io has a terrific solution with miniconda. I found
&lt;a href=&quot;http://conda.pydata.org/docs/travis.html&quot;&gt;this documentation&lt;/a&gt; to be quite helpful in setting up
travis-ci to work with my code. Once you get it working Travis-CI
provides a pretty badge that you can put in your repository README
to tell the world that your code has been tested, and (hopefully)
it passed!&lt;/p&gt;

&lt;p&gt;Here’s an example from one of my repositories of what the badge looks
like.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://travis-ci.org/mattgiguere/pyutil&quot;&gt;&lt;img src=&quot;https://travis-ci.org/mattgiguere/pyutil.svg?branch=master&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you push a commit to github that doesn’t pass testing, it turns
red and says “failed”. Don’t worry, you’ll also receive an email
notification informing you of the change in status so you can
quickly repair the damages.&lt;/p&gt;

&lt;h3 id=&quot;coveralls&quot;&gt;Coveralls&lt;/h3&gt;

&lt;p&gt;Now you have testing setup, and you have travis-ci setup to
perform continuous integration and make sure your latest commit
is performing the way you expect it to! But &lt;em&gt;how much&lt;/em&gt; of the
code is actually being tested? Travis-CI will tell you if all
of the tests you made ran successfully, but what if you are only
testing a tiny fraction of one of your routines? That’s where
&lt;a href=&quot;https://coveralls.io&quot;&gt;coveralls&lt;/a&gt; comes in to play. Coveralls automatically
analyzes your tests and code to see what fraction of your code
is actually being covered by your tests. Not only does it check
to see if all of your subroutines and methods are being tested,
but if actually looks into all of the conditional cases to make
sure all of the exceptional cases are being handled (i.e., it
looks to make sure you’re testing all of the
&lt;a href=&quot;http://en.wikipedia.org/wiki/Edge_case&quot;&gt;edge cases&lt;/a&gt;). Once you get coveralls up and running,
not only will it tell you what percent of your code you are
actually testing, but through its site you can zoom in and easily
see what parts of your code you are missing with your tests. This is
a great tool for checking to make sure you are covering all
cases with your tests.&lt;/p&gt;

&lt;p&gt;Coveralls can be integrated with travis to run once travis finishes
with its tests. Like travis, coveralls comes with another pretty
badge to show the world what percent of your code has been tested.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://coveralls.io/r/mattgiguere/pyutil?branch=master&quot;&gt;&lt;img src=&quot;https://coveralls.io/repos/mattgiguere/pyutil/badge.svg?branch=master&quot; alt=&quot;Coverage Status&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;codacy&quot;&gt;Codacy&lt;/h3&gt;

&lt;p&gt;Lastly, there’s &lt;a href=&quot;https://www.codacy.com/login&quot;&gt;codacy&lt;/a&gt;, another great tool that is
free for open source software projects. Like coveralls and
travis, codacy works with github repositories (and many others)
and looks for commits to your repository. Upon new commits, it
regrades your coding and provides a report card on how your
code stacks up in several categories. These categories are&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Code Complexity&lt;/li&gt;
  &lt;li&gt;Code Style&lt;/li&gt;
  &lt;li&gt;Compatibility&lt;/li&gt;
  &lt;li&gt;Documentation&lt;/li&gt;
  &lt;li&gt;Error Prone&lt;/li&gt;
  &lt;li&gt;Performance&lt;/li&gt;
  &lt;li&gt;Security&lt;/li&gt;
  &lt;li&gt;Unused Code&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If any of factors are less than perfect, you can zoom in and
it provides details on how to improve your code. Like all great
tools, Codacy makes pretty badges to show off your skills.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.codacy.com/public/matthewgiguere/pyutil&quot;&gt;&lt;img src=&quot;https://www.codacy.com/project/badge/24f412c6b6c443f8b6693936594811a1&quot; alt=&quot;Codacy Badge&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;other-badges&quot;&gt;Other Badges&lt;/h3&gt;

&lt;p&gt;I hope you find the above tools useful and implement them in your own
projects. If you are looking for other ways to decorate your
repository README files, you should check out
&lt;a href=&quot;http://shields.io&quot;&gt;shields.io&lt;/a&gt; to find other useful badges, or create
your own.&lt;/p&gt;

</description>
        <pubDate>Fri, 20 Mar 2015 09:20:35 -0400</pubDate>
        <link>http://mattgiguere.github.io/2015/03/20/better-python-coding-practices.html</link>
        <guid isPermaLink="true">http://mattgiguere.github.io/2015/03/20/better-python-coding-practices.html</guid>
        
        <category>codacy,</category>
        
        <category>coveralls,</category>
        
        <category>travis-ci,</category>
        
        <category>read</category>
        
        <category>the</category>
        
        <category>docs,</category>
        
        <category>python</category>
        
        
      </item>
    
      <item>
        <title>Time Lapse MAO</title>
        <description>&lt;p&gt;The Yale Astronomy Department is putting together a video showcasing some of
the work going on in the department. All of the parts recently arrived for the
Moletai Astronomical Observatory (MAO) Spectrograph that our group is
building. The timing seems perfect, so the videographer in charge setup a
couple cameras to capture the initial build of the spectrograph.&lt;/p&gt;

&lt;p&gt;The photographer sent all of the stills in advance, and we couldn’t wait to
see what the final time lapse would like, so I made a few time lapse videos
myself using &lt;code class=&quot;highlighter-rouge&quot;&gt;ffmpeg&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;setting-up-ffmpeg&quot;&gt;Setting up ffmpeg&lt;/h3&gt;

&lt;p&gt;To put this together, I needed to install ffmpeg. This turned out to be a \
little challenging. I tried the normal homebrew install:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;brew install ffmpeg&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This worked! I then added a symbolic link to add it to my path:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /usr/local/bin
sudo ln -s /usr/local/Cellar/ffmpeg/2.5.3/bin/ffmpeg ffmpeg&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Unfortunately, when I tried to get help on ffmpeg, here’s what it
returned:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;ffmpeg --help
dyld: Library not loaded: /usr/local/lib/libx264.142.dylib
  Referenced from: /usr/local/bin/ffmpeg
  Reason: image not found
Trace/BPT &lt;span class=&quot;nb&quot;&gt;trap&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I then did a search for this .dylib. homebrew installed it:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /usr/local/Cellar
find . -name libx264.142.dylib
./x264/r2495/lib/libx264.142.dylib&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I just needed to add it to my path:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /usr/local/bin
sudo ln -s /usr/local/Cellar/x264/r2495/lib/libx264.142.dylib libx264.142.dylib&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I repeated this for a few more packages homebrew installed that were not in my
path:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;sudo ln -s /usr/local/Cellar/x264/r2495/lib/libx264.142.dylib libx264.142.dylib
sudo ln -s /usr/local/Cellar/libvo-aacenc/0.1.2/lib/libvo-aacenc.0.dylib libvo-aacenc.0.dylib
sudo ln -s /usr/local/Cellar/lame/3.99.5/lib/libmp3lame.0.dylib libmp3lame.0.dylib&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Finally, &lt;code class=&quot;highlighter-rouge&quot;&gt;ffmpeg -h&lt;/code&gt; returned the help, as expected.&lt;/p&gt;

&lt;p&gt;I found &lt;a href=&quot;https://trac.ffmpeg.org/wiki/Create%20a%20video%20slideshow%20from%20images&quot;&gt;this page&lt;/a&gt;
on the ffmpeg wiki to be helpful in creating the time lapse. And
&lt;a href=&quot;https://ffmpeg.org/ffmpeg.html#Video-and-Audio-file-format-conversion&quot;&gt;Section 7.3&lt;/a&gt; of the documentation too.&lt;/p&gt;

&lt;p&gt;The files I wanted to add were stored in a folder named Bench-View_JPG. They
were in sequential order, but they didn’t start at 0. The easiest way to add
them all to the movie was the use the &lt;code class=&quot;highlighter-rouge&quot;&gt;pattern_type&lt;/code&gt; optional argument in
conjunction with &lt;code class=&quot;highlighter-rouge&quot;&gt;glob&lt;/code&gt;. The other options I used were:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;-&lt;em&gt;framerate&lt;/em&gt;: the number of frames per second to input
 -&lt;em&gt;r&lt;/em&gt;: the number of frames per second in the output video&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;s&lt;/em&gt;: the size of the output video&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I wanted my video to be 1080p HD, and the final video to be called
&lt;code class=&quot;highlighter-rouge&quot;&gt;BenchMovie1080p11fps.mp4&lt;/code&gt;, so I used the following command:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;ffmpeg -framerate 11 -pattern_type glob -i &lt;span class=&quot;s1&quot;&gt;&#39;Bench-View_JPG/*.jpg&#39;&lt;/span&gt; -r 11 -s 1620x1080 BenchMovie1080p11fps.mp4&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The result can be seen below.&lt;/p&gt;

&lt;video width=&quot;100%&quot; height=&quot;auto&quot; controls=&quot;&quot;&gt;
  &lt;source src=&quot;/images/BenchMovie1080p11fps.mp4&quot; type=&quot;video/mp4&quot; /&gt;
  Note: You are missing out on our time lapse video!
  Upgrade your browser to one that supports the video tag.
&lt;/video&gt;

&lt;p&gt;For embedding the video into the web page, I used the HTML5 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;video&amp;gt;&lt;/code&gt; tag. I
also set the width to “100%”” and the height to “auto” to make sure it was
responsive and scaled properly. Here’s the code that made the above video:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;video&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;100%&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;auto&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;controls&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;source&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/images/BenchMovie1080p11fps.mp4&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;video/mp4&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
Note: You are missing out on our time lapse video!
Upgrade your browser to one that supports the video tag.
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/video&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The message, of course, only appears in unsupported browsers. Chrome,
Firefox, Internet Explore, Opera, and Safari all support mp4 in the
video tag.&lt;/p&gt;

&lt;p&gt;The result is something that looks great on any browser and any device! I
also created a time lapse video from stills taken with the other camera using
the following command:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;ffmpeg -framerate 11 -pattern_type glob -i &lt;span class=&quot;s1&quot;&gt;&#39;Full-View_JPG/_CAM*.jpg&#39;&lt;/span&gt; -r 11 -s 1620x1080 FullMovie1080p11fps.mp4&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The results can be seen on MAO page of the &lt;a href=&quot;http://exoplanets.astro.yale.edu/instrumentation/mao.php&quot;&gt;Exoplanets Web Site&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Wed, 18 Mar 2015 08:22:10 -0400</pubDate>
        <link>http://mattgiguere.github.io/2015/03/18/time-lapse-mao.html</link>
        <guid isPermaLink="true">http://mattgiguere.github.io/2015/03/18/time-lapse-mao.html</guid>
        
        <category>MAO,</category>
        
        <category>ffmpeg,</category>
        
        <category>Yale,</category>
        
        <category>Instrumentation,</category>
        
        <category>mp4,</category>
        
        <category>time</category>
        
        <category>lapse</category>
        
        
      </item>
    
      <item>
        <title>Electric Rates By State</title>
        <description>&lt;p&gt;I was talking with my mother-in-law the other day, and we were wondering what
the highest electric rates in the country are. The US Energy Information
Administration does an excellent job of collecting this information and
displaying it in tabular form on their website. Click &lt;a href=&quot;http://www.eia.gov/electricity/monthly/epm_table_grapher.cfm?t=epmt_5_6_a&quot;&gt;here&lt;/a&gt; to see
what the answer is for the latest month. However, there is enough data in that
table that it took me a minute to skim through, understand every row and
column, and understand the answer to our question. I felt like this data set
deserved a better visualization, so I created it.&lt;/p&gt;

&lt;script type=&quot;text/javascript&quot; src=&quot;https://public.tableau.com/javascripts/api/viz_v1.js&quot;&gt;&lt;/script&gt;
&lt;div class=&quot;tableauPlaceholder&quot; style=&quot;width: 1004px; height: 675px;&quot;&gt;&lt;noscript&gt;&lt;a href=&quot;#&quot;&gt;&lt;img alt=&quot;Dashboard 1 &quot; src=&quot;https:&amp;#47;&amp;#47;public.tableau.com&amp;#47;static&amp;#47;images&amp;#47;el&amp;#47;electricRatesByState201411&amp;#47;Dashboard1&amp;#47;1_rss.png&quot; style=&quot;border: none&quot; /&gt;&lt;/a&gt;&lt;/noscript&gt;&lt;object class=&quot;tableauViz&quot; width=&quot;1004&quot; height=&quot;675&quot; style=&quot;display:none;&quot;&gt;&lt;param name=&quot;host_url&quot; value=&quot;https%3A%2F%2Fpublic.tableau.com%2F&quot; /&gt; &lt;param name=&quot;site_root&quot; value=&quot;&quot; /&gt;&lt;param name=&quot;name&quot; value=&quot;electricRatesByState201411&amp;#47;Dashboard1&quot; /&gt;&lt;param name=&quot;tabs&quot; value=&quot;no&quot; /&gt;&lt;param name=&quot;toolbar&quot; value=&quot;yes&quot; /&gt;&lt;param name=&quot;static_image&quot; value=&quot;https:&amp;#47;&amp;#47;public.tableau.com&amp;#47;static&amp;#47;images&amp;#47;el&amp;#47;electricRatesByState201411&amp;#47;Dashboard1&amp;#47;1.png&quot; /&gt; &lt;param name=&quot;animate_transition&quot; value=&quot;yes&quot; /&gt;&lt;param name=&quot;display_static_image&quot; value=&quot;yes&quot; /&gt;&lt;param name=&quot;display_spinner&quot; value=&quot;yes&quot; /&gt;&lt;param name=&quot;display_overlay&quot; value=&quot;yes&quot; /&gt;&lt;param name=&quot;display_count&quot; value=&quot;yes&quot; /&gt;&lt;param name=&quot;showVizHome&quot; value=&quot;no&quot; /&gt;&lt;param name=&quot;showTabs&quot; value=&quot;y&quot; /&gt;&lt;/object&gt;&lt;/div&gt;

&lt;p&gt;I was surprised by both the state with the highest and the state with the
lowest electric rates. Hawai’i has by far the highest average electric rate,
 at 37.6 ¢/kWh, and Washington State has the lowest rate, at only 8.8 ¢/kWh.&lt;/p&gt;

&lt;h3 id=&quot;per-capita-energy-usage&quot;&gt;Per Capita Energy Usage&lt;/h3&gt;

&lt;p&gt;The US EIA also provides a trove of data on many different parameters. I was
then interested to find out who spends the largest fraction of their income
on electric. The US EIA does not provide that information directly, but they
do publish the total retail sales per state.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;http://www.census.gov/popest/data/national/totals/2014/index.html&quot;&gt;US Census Bureau publish&lt;/a&gt; another excellent data set tabulating
the estimated population per state per year. I combined these two data sets
using &lt;code class=&quot;highlighter-rouge&quot;&gt;pandas&lt;/code&gt; in Python (see bottom of post for details),
and the resulting average per capita energy use by state can be seen below.&lt;/p&gt;

&lt;script type=&quot;text/javascript&quot; src=&quot;https://public.tableau.com/javascripts/api/viz_v1.js&quot;&gt;&lt;/script&gt;
&lt;div class=&quot;tableauPlaceholder&quot; style=&quot;width: 1004px; height: 675px;&quot;&gt;&lt;noscript&gt;&lt;a href=&quot;#&quot;&gt;&lt;img alt=&quot;DashDesk &quot; src=&quot;https:&amp;#47;&amp;#47;public.tableau.com&amp;#47;static&amp;#47;images&amp;#47;en&amp;#47;energyUsagePerCap201411YTD&amp;#47;DashDesk&amp;#47;1_rss.png&quot; style=&quot;border: none&quot; /&gt;&lt;/a&gt;&lt;/noscript&gt;&lt;object class=&quot;tableauViz&quot; width=&quot;1004&quot; height=&quot;675&quot; style=&quot;display:none;&quot;&gt;&lt;param name=&quot;host_url&quot; value=&quot;https%3A%2F%2Fpublic.tableau.com%2F&quot; /&gt; &lt;param name=&quot;site_root&quot; value=&quot;&quot; /&gt;&lt;param name=&quot;name&quot; value=&quot;energyUsagePerCap201411YTD&amp;#47;DashDesk&quot; /&gt;&lt;param name=&quot;tabs&quot; value=&quot;no&quot; /&gt;&lt;param name=&quot;toolbar&quot; value=&quot;yes&quot; /&gt;&lt;param name=&quot;static_image&quot; value=&quot;https:&amp;#47;&amp;#47;public.tableau.com&amp;#47;static&amp;#47;images&amp;#47;en&amp;#47;energyUsagePerCap201411YTD&amp;#47;DashDesk&amp;#47;1.png&quot; /&gt; &lt;param name=&quot;animate_transition&quot; value=&quot;yes&quot; /&gt;&lt;param name=&quot;display_static_image&quot; value=&quot;yes&quot; /&gt;&lt;param name=&quot;display_spinner&quot; value=&quot;yes&quot; /&gt;&lt;param name=&quot;display_overlay&quot; value=&quot;yes&quot; /&gt;&lt;param name=&quot;display_count&quot; value=&quot;yes&quot; /&gt;&lt;param name=&quot;showVizHome&quot; value=&quot;no&quot; /&gt;&lt;param name=&quot;showTabs&quot; value=&quot;y&quot; /&gt;&lt;/object&gt;&lt;/div&gt;

&lt;p&gt;It’s interesting to see that the states with some of
the highest energy prices use the least amount of energy, and some of the
states with the lowest energy prices use the highest amount of energy per
capita.&lt;/p&gt;

&lt;p&gt;I later realized that the US EIA does indeed provide information on
the &lt;a href=&quot;http://www.eia.gov/tools/faqs/faq.cfm?id=97&amp;amp;t=3&quot;&gt;average amount spent per customer by state&lt;/a&gt;, but
not the average amount spent per capita by state. They calculated that
the average Hawaii resident customer uses the least amount of energy and the
average Louisianan customer uses the most energy. This qualitatively agrees
with my findings, but I calculated the result per resident (not per
customer like the EIA).
The average &lt;em&gt;customer&lt;/em&gt; purchases a lot more energy than the average
&lt;em&gt;resident&lt;/em&gt; uses. This makes sense since more than 1 person lives in the
average household.&lt;/p&gt;

&lt;h3 id=&quot;percent-of-income-spent-on-electric&quot;&gt;Percent of Income Spent on Electric&lt;/h3&gt;

&lt;p&gt;The next question I would like to address is what is the fraction of income
that is used towards electricity by state. To answer this I used the results
from the above analysis in addition to the Annual Social and Economic
Supplement Current Income of Households by State Using 2-Year-Average
Medians from the US Census Bureau, which can be downloaded &lt;a href=&quot;http://www.census.gov/hhes/www/income/data/statemedian/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The percent of income spent on electric was calculated by taking the average
per capita energy use by state, multiplying it by the average persons per
household in the US (retrieved from &lt;a href=&quot;http://quickfacts.census.gov/qfd/states/00000.html&quot;&gt;here&lt;/a&gt;), multiplying that by the
average residential electric rate by state for 2014, and dividing by the 2012 -
 2013 2-Year Averaged Median Household income. If you prefer mathematical
notation, that is&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\[
 f_{I} = \frac{E_{C} H_{p} R_{E}}{I}
 \]&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;script type=&quot;math/tex&quot;&gt;f_{I}&lt;/script&gt;: fraction of income spent on electric&lt;/li&gt;
  &lt;li&gt;&lt;script type=&quot;math/tex&quot;&gt;E_{C}&lt;/script&gt;: Average energy usage per capita by state (&lt;a href=&quot;http://www.eia.gov/electricity/monthly/epm_table_grapher.cfm?t=epmt_5_6_a&quot;&gt;source&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;script type=&quot;math/tex&quot;&gt;H_{p}&lt;/script&gt;: The average persons per household in the US (&lt;a href=&quot;http://quickfacts.census.gov/qfd/states/00000.html&quot;&gt;source&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;script type=&quot;math/tex&quot;&gt;R_{E}&lt;/script&gt;: The average electric rate per kWh by state (&lt;a href=&quot;http://www.eia.gov/electricity/monthly/epm_table_grapher.cfm?t=epmt_5_6_a&quot;&gt;source&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;script type=&quot;math/tex&quot;&gt;I&lt;/script&gt;: The median household income by state (&lt;a href=&quot;http://www.census.gov/hhes/www/income/data/statemedian/&quot;&gt;source&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Below is the result.&lt;/p&gt;

&lt;script type=&quot;text/javascript&quot; src=&quot;https://public.tableau.com/javascripts/api/viz_v1.js&quot;&gt;&lt;/script&gt;
&lt;div class=&quot;tableauPlaceholder&quot; style=&quot;width: 1004px; height: 675px;&quot;&gt;&lt;noscript&gt;&lt;a href=&quot;#&quot;&gt;&lt;img alt=&quot;Dashboard 1 &quot; src=&quot;https:&amp;#47;&amp;#47;public.tableau.com&amp;#47;static&amp;#47;images&amp;#47;el&amp;#47;electricPercentSpent&amp;#47;Dashboard1&amp;#47;1_rss.png&quot; style=&quot;border: none&quot; /&gt;&lt;/a&gt;&lt;/noscript&gt;&lt;object class=&quot;tableauViz&quot; width=&quot;1004&quot; height=&quot;675&quot; style=&quot;display:none;&quot;&gt;&lt;param name=&quot;host_url&quot; value=&quot;https%3A%2F%2Fpublic.tableau.com%2F&quot; /&gt; &lt;param name=&quot;site_root&quot; value=&quot;&quot; /&gt;&lt;param name=&quot;name&quot; value=&quot;electricPercentSpent&amp;#47;Dashboard1&quot; /&gt;&lt;param name=&quot;tabs&quot; value=&quot;no&quot; /&gt;&lt;param name=&quot;toolbar&quot; value=&quot;yes&quot; /&gt;&lt;param name=&quot;static_image&quot; value=&quot;https:&amp;#47;&amp;#47;public.tableau.com&amp;#47;static&amp;#47;images&amp;#47;el&amp;#47;electricPercentSpent&amp;#47;Dashboard1&amp;#47;1.png&quot; /&gt; &lt;param name=&quot;animate_transition&quot; value=&quot;yes&quot; /&gt;&lt;param name=&quot;display_static_image&quot; value=&quot;yes&quot; /&gt;&lt;param name=&quot;display_spinner&quot; value=&quot;yes&quot; /&gt;&lt;param name=&quot;display_overlay&quot; value=&quot;yes&quot; /&gt;&lt;param name=&quot;display_count&quot; value=&quot;yes&quot; /&gt;&lt;param name=&quot;showVizHome&quot; value=&quot;no&quot; /&gt;&lt;param name=&quot;showTabs&quot; value=&quot;y&quot; /&gt;&lt;/object&gt;&lt;/div&gt;

&lt;p&gt;This shows that despite having some of the lowest energy rates in the country,
a combination of the lowest median annual income and the highest energy usage
has driven many southern states to spend the highest fraction of their income
on electric. Mississipians spend the most on electric, at 4.5 % of their
income, and Utahans spend the least, at only 1.3 %.&lt;/p&gt;

&lt;h3 id=&quot;appendix&quot;&gt;Appendix&lt;/h3&gt;

&lt;p&gt;All of the code and data used to create this blog post can be found in my
&lt;a href=&quot;https://github.com/mattgiguere/electric&quot;&gt;github repository&lt;/a&gt;
 on energy consumption in the United States. Furthermore, the Tableau
 workbooks that I used to create the above
illustrations can be downloaded for my Tableau public profile &lt;a href=&quot;https://public.tableau.com/profile/mattgiguere#!/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Sun, 15 Mar 2015 12:19:59 -0400</pubDate>
        <link>http://mattgiguere.github.io/2015/03/15/electric-rates-by-state.html</link>
        <guid isPermaLink="true">http://mattgiguere.github.io/2015/03/15/electric-rates-by-state.html</guid>
        
        <category>csvkit,</category>
        
        <category>javascript,</category>
        
        <category>bootstrap,</category>
        
        <category>d3.js</category>
        
        
      </item>
    
      <item>
        <title>Running MPI Python Code on Yale Omega</title>
        <description>&lt;p&gt;Yesterday I got my Parallel Tempering MCMC code working on Yale’s
&lt;a href=&quot;http://westcampus.yale.edu/research/science-medicine-engineering/core-facililties/high-performance-computing-center&quot;&gt;Omega Cluster&lt;/a&gt;. I found &lt;a href=&quot;https://hpc.research.yale.edu/hpc_user_wiki/index.php/Omega&quot;&gt;the “documentation”&lt;/a&gt; to be far
out of date, and not very helpful. Fortunately, there were several people in
the department that could help me out (thanks Kaylea, Duncan, and Andys!!). In
the hopes of easing the reducing the setup time for others that may be
interested in using Omega for their research, I decided to write this blog post
detailing my setup.&lt;/p&gt;

&lt;h3 id=&quot;welcome-email&quot;&gt;Welcome Email&lt;/h3&gt;

&lt;p&gt;When your account is first created, you will receive an email that starts off
like this:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Welcome to Omega - Yale High Performance Cluster&lt;/p&gt;

  &lt;p&gt;An account has been created for you on omega.hpc.yale.edu.&lt;/p&gt;

  &lt;p&gt;Details about the cluster and its usage can be found at
* http://hpc.research.yale.edu/wiki/index.php/Omega&lt;/p&gt;

  &lt;p&gt;Before you can login you will need to create and upload your ssh key here:
* http://gold.hpc.yale.internal/cgi-bin/sshkeys.py&lt;/p&gt;

  &lt;p&gt;For additional information about ssh please visit:
* http://hpc.yale.edu/faq/secure-shell-faq/&lt;/p&gt;

  &lt;p&gt;There are several queues to choose from, each serving a different purpose
* http://hpc.research.yale.edu/wiki/index.php/Omega#FAS_Queues&lt;/p&gt;

  &lt;p&gt;When submitting jobs, some of the qsub terms have changed; most
importantly when selecting the number of nodes or number of
processors:
* http://hpc.research.yale.edu/wiki/index.php/Omega#Scheduling_your_Programs_to_run&lt;/p&gt;

&lt;/blockquote&gt;

&lt;h4 id=&quot;ssh-keys&quot;&gt;SSH Keys&lt;/h4&gt;
&lt;p&gt;The first thing to note that is not mentioned in the welcome email message (and
I could not find mentioned in the online documentation) is that the link given
to upload your SSH key does not work in the Safari browser. Use Google Chrome.&lt;/p&gt;

&lt;h4 id=&quot;sshing-into-omega&quot;&gt;SSHing Into Omega&lt;/h4&gt;
&lt;p&gt;Next, to SSH into omega, I used the command:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;ssh -p22 -i ~/.ssh/myomegakey netid@omega.hpc.yale.edu&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;creating-a-test-script&quot;&gt;Creating a Test Script&lt;/h4&gt;
&lt;p&gt;Now comes the fun stuff. All jobs submitted for processing need to be wrapped
in a shell script. Before you do anything else, create a test script and see
if it works. The sample script on the HPC site is out of date and results in
error messages. Below is a sample script that works (as of March 12, 2015).&lt;/p&gt;

&lt;p&gt;Contents of &lt;code class=&quot;highlighter-rouge&quot;&gt;my_test_script.sh&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;###fas_devel: for compiling and testing code,&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;###restricted to one job per user32 max cores, 4 hours max walltime&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;###name of job&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#PBS -N mytestjob&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;###-q queue_name&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#PBS -q fas_devel&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;###PBS -l procs=1, tpn=1&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#PBS -l nodes=1:ppn=8,mem=35gb&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#PBS -l walltime=4:00:00&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;##oe: stdout(o) and stderr(e)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#PBS -j oe&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;##where to put the output&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#PBS -o output_dir/$PBS_JOBNAME.$PBS_JOBID&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;##what you get emails for ((a)borted, (b)egin, (e)nd)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#PBS -m abe&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;###email yourself status messages about your job:&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#PBS -M firstname.lastname@yale.edu&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;##Import terminal env variables&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#PBS -V&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;OMP_NUM_THREADS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;8

&lt;span class=&quot;c&quot;&gt;###run from directory the job is submitted from&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$PBS_O_WORKDIR&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;##Command to execute:&lt;/span&gt;
date&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Most of what I wrote above is probably self-explanatory through the comments.
Yes, the ‘#’ signs should be in front of the PBS commands. The &lt;code class=&quot;highlighter-rouge&quot;&gt;$PBS_JOBNAME&lt;/code&gt;
and &lt;code class=&quot;highlighter-rouge&quot;&gt;$PBS_JOBID&lt;/code&gt; are handy variables that can be used to ensure your output is
printed to unique directories (i.e., you’re not overwriting previous results).&lt;/p&gt;

&lt;p&gt;To submit this job, type the following at the command line:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;qsub my_test_script.sh&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You should receive an email message when your script has begun execution. You
can see the status of it by typing &lt;code class=&quot;highlighter-rouge&quot;&gt;showq&lt;/code&gt;. The list is usually quite long, so
you might find it useful to pipe the results to grep and search for just lines
that contain your netid:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;showq | grep netid&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Note that this test script is simply printing the date, so it won’t take long
to run, and you should receive a finished email with exit 0 status shortly
after receiving the start email message.&lt;/p&gt;

&lt;p&gt;If all went well, congratulations!&lt;/p&gt;

&lt;h3 id=&quot;setting-up-python-and-mpi-on-omega&quot;&gt;Setting up Python and MPI on Omega&lt;/h3&gt;
&lt;p&gt;Now comes the fun part. Omega uses a module system. To print all available
modules in the Terminal window type the following:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;module avail&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;To find specific modules, use the &lt;code class=&quot;highlighter-rouge&quot;&gt;modulefind&lt;/code&gt; command:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;mjg22@login-0-0 ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;modulefind python
/home/apps/fas/Modules:
Applications/PythonPackages/numpy/numpy-GCC-ATLAS
Applications/PythonPackages/scipy/scipy-GCC-ATLAS
Applications/PythonPackages/wxPython/2.8
Apps/PythonPackages/numpy/numpy-GCC-ATLAS
Apps/PythonPackages/scipy/scipy-GCC-ATLAS
Apps/PythonPackages/wxPython/2.8
Compilers/Python/2.7.2
Compilers/Python/2.7.3
Compilers/Python/2.7.4rc2_experimental
Compilers/Python/2.7.5
Compilers/Python/2.7.6
Compilers/Python/2.7.9
Compilers/Python/3.2
Compilers/Python/3.3.5
Compilers/Python/OLD-2.7.5
Langs/Python/2.7.2
Langs/Python/2.7.3
Langs/Python/2.7.4rc2_experimental
Langs/Python/2.7.5
Langs/Python/2.7.6
Langs/Python/2.7.9
Langs/Python/3.2
Langs/Python/3.3.5
Langs/Python/OLD-2.7.5
Libraries/IPYTHON/1.1.0
Libraries/NETCDF4-PYTHON/1.1.0
Libraries/WXPYTHON/3.0.0
Libs/IPYTHON/1.1.0
Libs/NETCDF4-PYTHON/1.1.0
Libs/WXPYTHON/3.0.0
RH6/Langs/Python/2.7.2
RH6/Langs/Python/2.7.3
RH6/Langs/Python/2.7.4rc2_experimental
RH6/Langs/Python/3.2
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;mjg22@login-0-0 ~]&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As can be seen in the included output above, &lt;code class=&quot;highlighter-rouge&quot;&gt;modulefind&lt;/code&gt; is case insensitive.
There are many versions of python available, but the only packages that I
wanted to uses were numpy and scipy.&lt;/p&gt;

&lt;h4 id=&quot;loading-modules-and-adding-python-packages-using-pip&quot;&gt;Loading Modules and Adding Python Packages Using &lt;code class=&quot;highlighter-rouge&quot;&gt;pip&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;Adding more packages to your path can be a little tricky.
I wanted to use python 2.7.9, but when I loaded that module,
the &lt;code class=&quot;highlighter-rouge&quot;&gt;pip&lt;/code&gt; command was not in my path. I loaded several others, and it looks
like the most recent python 2 version to include &lt;code class=&quot;highlighter-rouge&quot;&gt;pip&lt;/code&gt; on Omega is 2.7.3.
Another problem is that you won’t have write access to install packages to
the default site-packages directory, so you will need to create a subdirectory
in your home directory, and specify an optional argument to pip telling it
where to install the libraries you need:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;mjg22@login-0-0 ~]&lt;span class=&quot;nv&quot;&gt;$mkdir&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;local&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;mjg22@login-0-0 ~]&lt;span class=&quot;nv&quot;&gt;$module&lt;/span&gt; load Langs/Python/2.7.3
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;mjg22@login-0-0 ~]&lt;span class=&quot;nv&quot;&gt;$module&lt;/span&gt; load Libs/NUMPY/1.9.1
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;mjg22@login-0-0 ~]&lt;span class=&quot;nv&quot;&gt;$pip&lt;/span&gt; install --install-option&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;--prefix=~/local/&quot;&lt;/span&gt; pandas
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;mjg22@login-0-0 ~]&lt;span class=&quot;nv&quot;&gt;$pip&lt;/span&gt; install --install-option&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;--prefix=~/local/&quot;&lt;/span&gt; argparse&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;setting-up-your-bashrc-file&quot;&gt;Setting up your .bashrc file&lt;/h3&gt;

&lt;p&gt;Now that we have the python libraries we want to use with our code, we can
modify our bash startup file to load the other modules we want and modify
our python path to include the libraries we installed in ~/local:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;c&quot;&gt;# .bashrc&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Source global definitions&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; -f /etc/bashrc &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
        . /etc/bashrc
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# User specific aliases and functions&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/home/fas/fischer/mjg22/local/bin:&lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt;

module load Langs/Python/2.7.9
module load Libs/NUMPY/1.9.1
module load Libraries/SCIPY/0.14.1
module load MPI/OpenMPI/1.6.5
module load Libs/MPI4PY/1.3.1

&lt;span class=&quot;c&quot;&gt;### Add custom installed python packages to my python path&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;### To install these, you need to use Python 2.7.3 because&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;### pip does not exist in the more recent modules&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;### module load Compilers/Python/2.7.3&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;### pip install --install-option=&quot;--prefix=~/local/&quot; package_name&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;###for example&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;### pip install --install-option=&quot;--prefix=~/local/&quot; argparse&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PYTHONPATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/home/fas/fischer/mjg22/local/lib/python2.7/site-packages:&lt;span class=&quot;nv&quot;&gt;$PYTHONPATH&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;testing-the-real-code&quot;&gt;Testing the real code&lt;/h3&gt;
&lt;p&gt;That should be everything. You should test your code on a single node before
attempting to run it on many cores. &lt;code class=&quot;highlighter-rouge&quot;&gt;fas_devel&lt;/code&gt;, as shown in the test script
above, is the queue you want to use for that. To see what other queues are
available click &lt;a href=&quot;https://hpc.research.yale.edu/hpc_user_wiki/index.php/Omega#FAS_Queues&quot;&gt;here&lt;/a&gt;. Note there are 8 cores per node for
Omega, and 36 GB of RAM per node, as mentioned in the &lt;a href=&quot;https://hpc.research.yale.edu/hpc_user_wiki/index.php/Omega#Hardware&quot;&gt;Hardware&lt;/a&gt;
section.&lt;/p&gt;

&lt;p&gt;I hope you found this post on getting started with MPI and python on the Yale
 Omega cluster helpful!&lt;/p&gt;

</description>
        <pubDate>Thu, 12 Mar 2015 06:06:07 -0400</pubDate>
        <link>http://mattgiguere.github.io/2015/03/12/running-mpi-python-code-on-yale-omega.html</link>
        <guid isPermaLink="true">http://mattgiguere.github.io/2015/03/12/running-mpi-python-code-on-yale-omega.html</guid>
        
        <category>python,</category>
        
        <category>mpi4py,</category>
        
        <category>mcmc,</category>
        
        <category>omega,</category>
        
        <category>yale,</category>
        
        <category>hpc</category>
        
        
      </item>
    
  </channel>
</rss>
